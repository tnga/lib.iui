/*
* For default theme. Here is the style definition of all iui custom grid features.
==================================================================================
*/

//* grid's columns are simply set by this way:
//* col-virtual-width = col-margin-left + col-margin-right + col(border-sized)-real-width.
//*=> col-virtual-width = 2*col-margin-right + col(border-sized)-real-width   (considering: col-margin-left = col-margin-right )
//*then: col(border-sized)-real-width = col-virtual-width - 2*col-margin-right
//*(col-margin-right and col-margin-left can be considering as column's external gutter)
//*(let take 2*col-margin-right = external-gutter-width)
//*then: col(border-sized)-real-width = col-virtual-width - external-gutter-width
//*
//*this is the theory and in the practice, it work approximatively well in opera-browser( tested on 12.16),
//*but get easly breaking issue on all tested recents browsers (firefox, webkits like browsers) when column's internal and external gutter become high.
//*so some way find to avoid that is to provide precision control for some higher value of column's internal and external gutter.
//*then when set column margin-right and margin-left, take it away a precise value depending of column's parent width.
//*when set column padding, take in mind the fact to avoid that, depending of column's parent width, setting value become higher than `col-real-width`.
//*/
//get the column's external gutter size with a precision (for approximation).
//`precision`, cause theory seems sometime to not exactly match with pratice :(.
@function col-alpha-margin ($precision:0) {

    @return  percentage($enl-gutter-width) - $precision ;
}


.#{$grid-namespace} {
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px;
    box-sizing: content-box;

    &.no-inl-gutter .col {
        padding: 0px !important;    
    }
    &.span-all .col {
        width: 100% - col-alpha-margin() !important;    
    }
    &.reverse .col {
        float: right!important;    
    }
    
    // Clear floating children
    &:after {
        content: "";
        display: table;
        clear: both;
    }

    .col {
        float: left;
        box-sizing: border-box;
        padding: $inl-gutter-width / 2;
        margin-right: col-alpha-margin() / 2 ;
        margin-left: col-alpha-margin() / 2 ;
        left: auto;
        right: auto;
        
        &[class*="push-"],
        &[class*="pull-"] {
            position: relative;
        }

        //* below, the goal is to genarate column class syntax depending of target media screen.
        //* with `&.#{$target-id}#{$i}-#${group}` we can have for example:
        //* `.col.x1-2` for smallest media and up
        //* `.col.p1-3` for smaller media and up
        //* `.col.s1-5` for small media and up
        //* `.col.m1-6` for medium media and up
        //* `.col.n1-8` for normal media and up
        //* `.col.l1-10` for large media and up
        //* `.col.b1-12` for large media and up
        //*
        //* where `{$i}-#{$group}` mean '$i of $group' (1-3 = '1 of 3')
        //* which also mean 1 column of 3 (or 1/3 of the row's width)
        //
        //**optimization for column class definition with css code generation**.
        //*this optimization can be compare to grid system implementation on commit `86c4f39`* (compare both genereted grid css line size).
        //
        //for example, .col.x1-1, col.x2-2, ..., col.x12-12 have the same style definitions.
        //so an optimized way is to group its around that css properties using firsts haven column class ratios (1/1, 1/2, ...).
        //in other word, considering 1/1 = 2/2 = 3/3 = ... or 1/3 = 2/6 = 6/12 we will test if a ratio ($i/$group) have allready use.
        //if so, considered column class will be use as class to be extended by class that have similar ratio.
        //for that we use a scope range that will content unique ratios with associated column class name.
        //as example, 1/2 is one of unique ratio that we can have depending of `$col-groups` list.
        //so it will be setting on the scope range with it associated column class name (egg: `x1-2`).
        //then, all similar ratio (2/4, 4/8, 5/10, 6/12) will have associated class (egg: `x2-4`, ...) extend 1/2 ratio's class egg: `x1-2`) css definitions
        //
        //initial scope range declaration
        $col-scope-range: () ;
        $push-scope-range: () ;
        $pull-scope-range: () ;
        $offset-scope-range: () ;
        
        //genarate column class syntax depending of media
        @mixin gen-media-col-from ($target-id, $i, $group) {
            
            &.#{$target-id}#{$i}-#{$group} {
                
                @if map_has_key($col-scope-range, $i/$group) {
                    
                    $col-to-extend: map_get($col-scope-range, $i/$group) ;
                    
                    @extend  .#{$col-to-extend};
                }
                @else {
                   
                    width: percentage($i/$group) - col-alpha-margin() ;
                    
                    $col-scope-range: map-merge($col-scope-range, ($i/$group : '#{$target-id}#{$i}-#{$group}')) ;
                }               
            }

            @if ($grid-pushes) {

                &.push-#{$target-id}#{$i}-#{$group} {

                    @if map_has_key($push-scope-range, $i/$group) {

                        $push-to-extend: map_get($push-scope-range, $i/$group) ;

                        @extend  .#{$push-to-extend};
                    }
                    @else {

                        left: percentage($i/$group);

                        $push-scope-range: map-merge($push-scope-range, ($i/$group : 'push-#{$target-id}#{$i}-#{$group}')) ;
                    } 
                }
            } // end pushes

            @if ($grid-pulls) {
                
                &.pull-#{$target-id}#{$i}-#{$group} {
                    
                    @if map_has_key($pull-scope-range, $i/$group) {

                        $pull-to-extend: map_get($pull-scope-range, $i/$group) ;

                        @extend  .#{$pull-to-extend};
                    }
                    @else {

                        right: percentage($i/$group);

                        $pull-scope-range: map-merge($pull-scope-range, ($i/$group : 'pull-#{$target-id}#{$i}-#{$group}')) ;
                    } 
                }
            } // end pulls

            @if ($grid-offsets) {

                &.offset-#{$target-id}#{$i}-#{$group} {

                    @if map_has_key($offset-scope-range, $i/$group) {

                        $offset-to-extend: map_get($offset-scope-range, $i/$group) ;

                        @extend  .#{$offset-to-extend};
                    }
                    @else {

                        margin-left: percentage($i/$group);

                        $offset-scope-range: map-merge($offset-scope-range, ($i/$group : 'offset-#{$target-id}#{$i}-#{$group}')) ;
                    }
                }
            } // end offset
        }

        //genarate column class syntax depending of target media screen
        // For each of our target media groups...
        @each $target-id, $target-width in $media-groups {

            @if $target-width == "any" {

                // For each of our column groups...
                @each $group in $col-groups {

                    // For each column width from 1 to the column group...
                    @for $i from 1 through $group {

                        @include gen-media-col-from ($target-id, $i, $group) ;
                    } // end @for
                } // end @each
            }
            @else {
            
                @media only screen and (min-width : #{$target-width}) {

                    //initial scope range declaration to overwrite precedent usages
                    $col-scope-range: () ;
                    $push-scope-range: () ;
                    $pull-scope-range: () ;
                    $offset-scope-range: () ;
                    
                    // For each of our column groups...
                    @each $group in $col-groups {

                        // For each column width from 1 to the column group...
                        @for $i from 1 through $group {

                           @include gen-media-col-from ($target-id, $i, $group) ;
                        } // end @for
                    } // end @each
                }
            } // end @else
        } // end @each
            
    }
}
